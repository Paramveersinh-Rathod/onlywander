<% layout("/layouts/boilerplate") %>

<style>
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .host-form-container {
        background-color: #ffffff;
        padding: 2.5rem 3rem;
        border-radius: 1rem;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.07);
        animation: fadeInUp 0.6s ease-out forwards;
    }

    .form-header h2 {
        font-weight: 700;
        color: #222;
    }

    .form-header p {
        color: #6c757d;
    }

    .form-section-heading {
        font-weight: 600;
        color: #343a40;
        margin-top: 2.5rem;
        padding-bottom: 0.75rem;
        border-bottom: 1px solid #e9ecef;
    }

    .form-floating .form-control {
        height: calc(3.5rem + 2px);
    }
    
    .custom-file-input {
        color: transparent;
    }
    .custom-file-input::-webkit-file-upload-button {
        visibility: hidden;
    }
    .custom-file-input::before {
        content: 'Select Image';
        color: #fff;
        background-color: #212529;
        display: inline-block;
        border: 1px solid transparent;
        border-radius: 0.375rem;
        padding: 0.75rem 1.25rem;
        outline: none;
        white-space: nowrap;
        cursor: pointer;
        font-weight: 600;
        transition: background-color .15s ease-in-out;
    }
    .custom-file-input:hover::before {
        background-color: #3e444a;
    }
    .custom-file-input:active::before {
        background-color: #4a5056;
    }
    #file-chosen {
        margin-left: 1rem;
        color: #6c757d;
        font-style: italic;
    }

    .feature-card {
        border: 2px solid #e9ecef;
        border-radius: 0.75rem;
        padding: 1rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
        height: 120px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .feature-card:hover {
        border-color: #adb5bd;
        transform: translateY(-3px);
    }

    .feature-card.is-selected {
        border-color: #fe424d;
        background-color: #fff8f8;
        box-shadow: 0 4px 15px rgba(254, 66, 77, 0.1);
    }

    .feature-card .form-check-input {
        display: none; 
    }

    .feature-card i {
        font-size: 1.75rem;
        margin-bottom: 0.5rem;
        color: #495057;
    }
    
    .feature-card.is-selected i {
        color: #fe424d;
    }

    .feature-card span {
        font-weight: 500;
        color: #495057;
        font-size: 0.9rem;
    }


    .btn-brand-add {
        background-color: #fe424d;
        color: white;
        padding: 0.8rem;
        font-weight: 600;
        border-radius: 0.5rem;
    }
    .btn-brand-add:hover {
        background-color: #e03842;
        color: white;
    }
</style>

<div class="row mt-4 mb-5 justify-content-center">
    <div class="col-md-9 col-lg-8">
        <div class="host-form-container">
            <div class="form-header text-center mb-4">
                <h2>Become a Host</h2>
                <p>Share your space and start earning on OnlyWander.</p>
            </div>
            
            <form method="POST" action="/listings" novalidate class="needs-validation form-with-loader" enctype="multipart/form-data">

                <h4 class="form-section-heading">Property Details</h4>
                <div class="form-floating my-3">
                    <input type="text" id="title" name="listing[title]" placeholder="Add a catchy title" class="form-control" required>
                    <label for="title">Listing Title</label>
                    <div class="valid-feedback">Title looks good!</div>
                </div>
                <div class="form-floating mb-3">
                    <textarea id="description" name="listing[description]" class="form-control" placeholder="Description" required style="height: 120px"></textarea>
                    <label for="description">Description</label>
                    <div class="invalid-feedback">A detailed description is required.</div>
                </div>

                <h4 class="form-section-heading">Media</h4>
                <div class="my-3">
                    <label for="image" class="form-label">Upload a high-quality image of your property.</label><br>
                    <input type="file" id="image" name="listing[image]" class="custom-file-input" required>
                    <span id="file-chosen">No file chosen</span>
                </div>

                <h4 class="form-section-heading">Location & Price</h4>
                <div class="row">
                    <div class="col-md-8">
                        <div class="form-floating my-3">
                            <input type="text" id="location" name="listing[location]" placeholder="City, State/Country" class="form-control" required>
                            <label for="location">Location</label>
                            <div class="invalid-feedback">A valid location is required.</div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-floating my-3">
                            <input type="text" id="country" name="listing[country]" placeholder="e.g., India" class="form-control" required>
                            <label for="country">Country</label>
                            <div class="invalid-feedback">A country is required.</div>
                        </div>
                    </div>
                </div>
                <div class="form-floating mb-3">
                    <input type="number" id="price" name="listing[price]" placeholder="1200" class="form-control" required>
                    <label for="price">Price per night (in â‚¹)</label>
                    <div class="invalid-feedback">Please set a valid price.</div>
                </div>

                <% 
                const allFeatures = [
                    { name: 'Amazing Pools', value: 'amazing_pools', icon: 'fa-solid fa-person-swimming' }, { name: 'Iconic Cities', value: 'iconic_cities', icon: 'fa-solid fa-mountain-city' }, { name: 'Mountains', value: 'mountains', icon: 'fa-solid fa-mountain' }, { name: 'Beachfront', value: 'beachfront', icon: 'fa-solid fa-umbrella-beach' }, { name: 'Countryside', value: 'countryside', icon: 'fa-solid fa-seedling' }, { name: 'Arctic', value: 'arctic', icon: 'fa-solid fa-snowflake' }, { name: 'Private Rooms', value: 'private_rooms', icon: 'fa-solid fa-bed' }, { name: 'Castles', value: 'castles', icon: 'fa-solid fa-chess-rook' }, { name: 'Boats', value: 'boats', icon: 'fa-solid fa-ship' }, { name: 'Cabins', value: 'cabins', icon: 'fa-solid fa-house-chimney-window' }, { name: 'Farms', value: 'farms', icon: 'fa-solid fa-cow' }, { name: 'Tiny Homes', value: 'tiny_homes', icon: 'fa-solid fa-house-user' }, { name: 'Luxe', value: 'luxe', icon: 'fa-solid fa-gem' }, { name: 'Off-the-grid', value: 'off_the_grid', icon: 'fa-solid fa-tree' }
                ];
                %>
                <h4 class="form-section-heading">Features & Categories (Max 3)</h4>
                <p class="text-muted">Select all the features that apply to your property.</p>
                <div class="row g-3 my-2">
                    <% for(let feature of allFeatures) { %>
                    <div class="col-md-4 col-6">
                        <label class="feature-card" for="feature-<%= feature.value %>">
                            <input 
                                class="form-check-input" 
                                type="checkbox" 
                                name="listing[features][]"
                                value="<%= feature.value %>" 
                                id="feature-<%= feature.value %>"
                                <% if (typeof listing !== 'undefined' && listing.features && listing.features.includes(feature.value)) { %>checked<% } %>
                            >
                            <i class="<%= feature.icon %>"></i><br>
                            <span><%= feature.name %></span>
                        </label>
                    </div>
                    <% } %>
                </div>
                
                <div class="d-grid mt-4">
                    <button class="btn btn-brand-add mt-3">Add Listing</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // --- Script for custom file input ---
        const actualBtn = document.getElementById('image');
        const fileChosen = document.getElementById('file-chosen');
        actualBtn.addEventListener('change', function(){
            fileChosen.textContent = this.files[0].name;
        });

        // --- Script for selectable feature cards ---
        const featureCheckboxes = document.querySelectorAll('.feature-card .form-check-input');
        
        featureCheckboxes.forEach(checkbox => {
            const card = checkbox.closest('.feature-card');
            const updateCardStyle = () => {
                if (checkbox.checked) {
                    card.classList.add('is-selected');
                } else {
                    card.classList.remove('is-selected');
                }
            };
            updateCardStyle();
            checkbox.addEventListener('change', updateCardStyle);
        });

        // --- Script for limiting feature selection ---
        const maxFeatures = 3;
        const updateCheckboxState = () => {
            const checkedCount = document.querySelectorAll('.feature-card .form-check-input:checked').length;
            
            if (checkedCount >= maxFeatures) {
                featureCheckboxes.forEach(checkbox => {
                    if (!checkbox.checked) {
                        checkbox.disabled = true;
                        checkbox.closest('.feature-card').style.opacity = '0.5';
                        checkbox.closest('.feature-card').style.cursor = 'not-allowed';
                    }
                });
            } else {
                featureCheckboxes.forEach(checkbox => {
                    checkbox.disabled = false;
                    checkbox.closest('.feature-card').style.opacity = '1';
                    checkbox.closest('.feature-card').style.cursor = 'pointer';
                });
            }
        };
        featureCheckboxes.forEach(checkbox => checkbox.addEventListener('change', updateCheckboxState));
        updateCheckboxState(); // Initial check on page load

        // --- Existing Mapbox Location Validation Script ---
        const mapToken = "<%= typeof mapToken !== 'undefined' ? mapToken : '' %>";
        const locationInput = document.querySelector('input[name="listing[location]"]');
        const submitBtn = document.querySelector('.btn-brand-add');
        const feedbackContainer = document.createElement('div');
        feedbackContainer.className = 'form-text text-center mt-2';
        locationInput.parentNode.insertBefore(feedbackContainer, locationInput.nextSibling);

        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.style.opacity = '0.5';
            submitBtn.style.cursor = 'not-allowed';
        }

        let debounceTimer;
        locationInput.addEventListener('input', () => {
            clearTimeout(debounceTimer);
            if (!mapToken) {
                console.error("Mapbox token is missing!");
                feedbackContainer.innerHTML = '<span class="text-danger">Configuration error: Map token not found.</span>';
                return;
            }
            feedbackContainer.innerHTML = '<span class="text-muted">Checking location...</span>';
            debounceTimer = setTimeout(async () => {
                const locationQuery = locationInput.value;
                if (locationQuery.length < 3) {
                    feedbackContainer.innerHTML = '';
                    return;
                }
                try {
                    const response = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(locationQuery)}.json?access_token=${mapToken}`);
                    const data = await response.json();
                    if (data.features && data.features.length > 0) {
                        feedbackContainer.innerHTML = '<span class="text-success"><i class="fa-solid fa-check"></i> Location is valid</span>';
                        submitBtn.disabled = false;
                        submitBtn.style.opacity = '1';
                        submitBtn.style.cursor = 'pointer';
                    } else {
                        feedbackContainer.innerHTML = '<span class="text-danger"><i class="fa-solid fa-times"></i> Invalid location. Please try again.</span>';
                        submitBtn.disabled = true;
                        submitBtn.style.opacity = '0.5';
                        submitBtn.style.cursor = 'not-allowed';
                    }
                } catch (error) {
                    console.error("Geocoding API error:", error);
                    feedbackContainer.innerHTML = '<span class="text-warning">Could not verify location.</span>';
                }
            }, 800);
        });
    });
</script>
